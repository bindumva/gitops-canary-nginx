apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-stable
  namespace: myapp-dev
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: myapp
      role: frontend
      version: stable
  template:
    metadata:
      labels:
        app: myapp
        role: frontend          # <- only these pods are exposed by NetworkPolicy
        version: stable
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: myapp
                    role: frontend
                topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: myapp
              role: frontend
      containers:
        - name: myapp
          image: public.ecr.aws/docker/library/nginx:1.26-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          readinessProbe:
            httpGet: { path: "/", port: http }
            initialDelaySeconds: 2
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: "/", port: http }
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          volumeMounts:
            - mountPath: /usr/share/nginx/html/index.html
              name: version
              subPath: index.html
      volumes:
        - name: version
          configMap:
            name: version-html-stable
